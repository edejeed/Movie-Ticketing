class EditTicket(QMainWindow):
    def __init__(self):
        super(EditTicket, self).__init__()
        loadUi("update_movies.ui", self)
        self.load.clicked.connect(self.loadata)
        self.update.clicked.connect(self.updatedata)
        self.back.clicked.connect(self.goBack)

    def updatedata(self):
        title = self.title.text()
        description = self.description.text()
        genre = self.comboBox.currentText()
        conn = sqlite3.connect("movies_data.db")
        cur = conn.cursor()
        cur.execute("SELECT * FROM movies_data WHERE Title=?", (title,))
        rows = cur.fetchall()
        for row in rows:
            if (title == row[0] or description == row[1] or genre == row[2]):
                msg = QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("Please Edit Information!")

                b = msg.exec_()

        if len(title) == 0 or len(description) == 0 or len(genre) ==0:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please Input Information!")

            b = msg.exec_()
        else:
            conn = sqlite3.connect("movies_data.db")
            cur = conn.cursor()
            cur.execute('''UPDATE movies_data SET Title = ?, Description = ?, Genre = ?;''',
                        (title, description, genre))
            conn.commit()
            msg = QMessageBox()
            msg.setWindowTitle("Saved")
            msg.setText("Movie Information Successfully Updated!")

            q = msg.exec_()

    def loadata(self):
        search = self.title.text()
        conn = sqlite3.connect("movies_data.db")
        cur = conn.cursor()
        cur.execute("SELECT * FROM movies_data WHERE Title=?", (search,))
        rows = cur.fetchall()

        if len(search) == 0:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please Input Info!")

            x = msg.exec_()
        else:
            for row in rows:
                self.title.setText(row[0])
                self.description.setText(row[1])
                if row[2] == 'Action':
                    self.comboBox.setCurrentIndex(0)
                elif row[2] == 'Adventure':
                    self.comboBox.setCurrentIndex(1)
                elif row[2] == 'Comedy':
                    self.comboBox.setCurrentIndex(2)
                elif row[2] == 'Horror':
                    self.comboBox.setCurrentIndex(3)
                elif row[2] == 'Romance':
                    self.comboBox.setCurrentIndex(4)
                else:
                    self.comboBox.setCurrentIndex(5)

    @staticmethod
    def goBack():
        moviescreen = MovieScreen()
        widget.addWidget(moviescreen)
        widget.setCurrentIndex(widget.currentIndex() + 1)


class AddTicket(QMainWindow):
    def __init__(self):
        super(AddTicket, self).__init__()
        loadUi("add_movies.ui", self)
        self.save.clicked.connect(self.addMovie)
        self.back.clicked.connect(self.goBack)

    def addMovie(self):
        title = self.title.text()
        description = self.description.text()
        genre = self.comboBox.currentText()

        if len(title) == 0 or len(description) == 0 or len(genre) == 0:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please Input Informations!")
            x = msg.exec_()

        else:
            conn = sqlite3.connect("movies_data.db")
            cur = conn.cursor()

            movie_info = [title, description, genre]
            cur.execute('INSERT INTO movies_data (Title, Description, Genre) VALUES (?,?,?)', movie_info)

            conn.commit()
            conn.close()

            msg = QMessageBox()
            msg.setWindowTitle("Success")
            msg.setText("Movie Successfully Added!")
            x = msg.exec_()

    @staticmethod
    def goBack():
        moviescreen = MovieScreen()
        widget.addWidget(moviescreen)
        widget.setCurrentIndex(widget.currentIndex() + 1)
